import 'package:flutter/material.dart';

void main() {
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Unit Price Comparison App',
      theme: AppTheme.darkTheme,
      home: const CompareBody(),
    );
  }
}

// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
class AppTheme {
  // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö
  static const Color cardColor1 = Color(0xFFE91E63); // ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà 1
  static const Color cardColor2 = Color(0xFF9C27B0); // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà 2
  static const Color cardBackgroundDark = Color(0xFF1B263B); // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏µ‡∏°‡∏∑‡∏î
  
  static final ThemeData darkTheme = ThemeData(
    brightness: Brightness.dark,
    scaffoldBackgroundColor: const Color(0xFF0D1B2A), // ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏´‡∏•‡∏±‡∏Å
    colorScheme: const ColorScheme.dark(
      primary: Color(0xFFFF6B6B), // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
      secondary: Color(0xFFE91E63), // ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
      surface: Color.fromARGB(255, 43, 33, 73), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß
      background: Color.fromARGB(255, 19, 15, 78), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    ),
    inputDecorationTheme: InputDecorationTheme(
      filled: true,
      fillColor: cardBackgroundDark.withOpacity(0.7),
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(15),
        borderSide: BorderSide.none,
      ),
      labelStyle: const TextStyle(color: Colors.white70),
      hintStyle: const TextStyle(color: Colors.white54),
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: const Color(0xFFFF6B6B), // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡πâ‡∏°
        foregroundColor: Colors.white,
        padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(25),
        ),
      ),
    ),
  );
}

// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
class ProductData {
  final String name; // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  final double volume; // ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£ (‡∏°‡∏•.)
  final double price; // ‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)
  final String unit; // ‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏°‡∏•., ‡∏•‡∏¥‡∏ï‡∏£, ‡∏Å‡∏£‡∏±‡∏°, ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)

  ProductData({
    required this.name,
    required this.volume,
    required this.price,
    required this.unit,
  });

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó/‡∏°‡∏•.)
  double get pricePerUnit {
    return price / volume;
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
  double get volumeInML {
    switch (unit.toLowerCase()) {
      case '‡∏•‡∏¥‡∏ï‡∏£':
      case 'l':
        return volume * 1000;
      case '‡∏°‡∏•.':
      case 'ml':
        return volume;
      case '‡∏Å‡∏Å.':
      case 'kg':
        return volume * 1000; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ 1 ‡∏Å‡∏Å. = 1000 ‡∏°‡∏•.
      case '‡∏Å‡∏£‡∏±‡∏°':
      case 'g':
        return volume;
      default:
        return volume;
    }
  }

  // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠ 100 ‡∏°‡∏•. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
  double get pricePer100ML {
    return (price / volumeInML) * 100;
  }
}

// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
class PriceCalculator {
  // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 2 ‡∏ä‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  static ComparisonResult compareProducts(ProductData product1, ProductData product2) {
    double price1 = product1.pricePer100ML;
    double price2 = product2.pricePer100ML;
    
    String betterChoice;
    double savings;
    String emoji;
    
    if (price1 < price2) {
      betterChoice = product1.name;
      savings = price2 - price1;
      emoji = 'üéâ';
    } else if (price2 < price1) {
      betterChoice = product2.name;
      savings = price1 - price2;
      emoji = '‚ú®';
    } else {
      betterChoice = '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô';
      savings = 0;
      emoji = '‚öñÔ∏è';
    }
    
    return ComparisonResult(
      betterChoice: betterChoice,
      savings: savings,
      emoji: emoji,
      product1PricePer100ML: price1,
      product2PricePer100ML: price2,
    );
  }
}

// ‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
class ComparisonResult {
  final String betterChoice; // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤
  final double savings; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠ 100 ‡∏°‡∏•.
  final String emoji; // ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  final double product1PricePer100ML; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà 1 ‡∏ï‡πà‡∏≠ 100 ‡∏°‡∏•.
  final double product2PricePer100ML; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà 2 ‡∏ï‡πà‡∏≠ 100 ‡∏°‡∏•.

  ComparisonResult({
    required this.betterChoice,
    required this.savings,
    required this.emoji,
    required this.product1PricePer100ML,
    required this.product2PricePer100ML,
  });
}

// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
class CompareBody extends StatefulWidget {
  const CompareBody({super.key});

  @override
  State<CompareBody> createState() => _CompareBodyState();
}

class _CompareBodyState extends State<CompareBody> {
  // Controllers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TextField ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏£‡∏Å
  final TextEditingController _product1NameController = TextEditingController();
  final TextEditingController _product1VolumeController = TextEditingController();
  final TextEditingController _product1PriceController = TextEditingController();
  
  // Controllers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TextField ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
  final TextEditingController _product2NameController = TextEditingController();
  final TextEditingController _product2VolumeController = TextEditingController();
  final TextEditingController _product2PriceController = TextEditingController();
  
  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  String _product1Unit = '‡∏°‡∏•.';
  String _product2Unit = '‡∏°‡∏•.';
  
  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
  ComparisonResult? _comparisonResult;
  
  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
  final List<String> _units = ['‡∏°‡∏•.', '‡∏•‡∏¥‡∏ï‡∏£', '‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏Å.'];

  @override
  void dispose() {
    // ‡∏•‡∏ö controllers ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leak
    _product1NameController.dispose();
    _product1VolumeController.dispose();
    _product1PriceController.dispose();
    _product2NameController.dispose();
    _product2VolumeController.dispose();
    _product2PriceController.dispose();
    super.dispose();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
  void _compareProducts() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (_product1NameController.text.isEmpty ||
        _product1VolumeController.text.isEmpty ||
        _product1PriceController.text.isEmpty ||
        _product2NameController.text.isEmpty ||
        _product2VolumeController.text.isEmpty ||
        _product2PriceController.text.isEmpty) {
      _showErrorDialog('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á üìù');
      return;
    }

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
      ProductData product1 = ProductData(
        name: _product1NameController.text,
        volume: double.parse(_product1VolumeController.text),
        price: double.parse(_product1PriceController.text),
        unit: _product1Unit,
      );

      ProductData product2 = ProductData(
        name: _product2NameController.text,
        volume: double.parse(_product2VolumeController.text),
        price: double.parse(_product2PriceController.text),
        unit: _product2Unit,
      );

      // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State
      setState(() {
        _comparisonResult = PriceCalculator.compareProducts(product1, product2);
      });
    } catch (e) {
      _showErrorDialog('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á üî¢');
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á Error Dialog
  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1B263B),
        title: const Text('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', style: TextStyle(color: Colors.white)),
        content: Text(message, style: const TextStyle(color: Colors.white70)),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏ï‡∏Å‡∏•‡∏á', style: TextStyle(color: Color(0xFFFF6B6B))),
          ),
        ],
      ),
    );
  }

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  void _clearAll() {
    setState(() {
      _product1NameController.clear();
      _product1VolumeController.clear();
      _product1PriceController.clear();
      _product2NameController.clear();
      _product2VolumeController.clear();
      _product2PriceController.clear();
      _product1Unit = '‡∏°‡∏•.';
      _product2Unit = '‡∏°‡∏•.';
      _comparisonResult = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      
      // Body ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
      body: Container(
        // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏•‡πà‡∏™‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡πÄ‡∏ö‡∏•‡∏≠
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              const Color(0xFF0D1B2A), // ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏´‡∏•‡∏±‡∏Å
              const Color(0xFF1B263B), // ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏£‡∏≠‡∏á
              const Color(0xFFE91E63).withOpacity(0.1), // ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡πÄ‡∏ö‡∏•‡∏≠
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: SingleChildScrollView(
          padding: const EdgeInsets.fromLTRB(20, 60, 20, 20), // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ó‡∏ô AppBar
          child: Column(
            children: [
              // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏≠‡∏õ
              const Text(
                'ü™ô Unit Price Comparison',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 28,
                ),
              ),
              const SizedBox(height: 30),
              // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏£‡∏Å
              _buildProductCard(
                title: 'Product 1',
                nameController: _product1NameController,
                volumeController: _product1VolumeController,
                priceController: _product1PriceController,
                selectedUnit: _product1Unit,
                onUnitChanged: (value) => setState(() => _product1Unit = value!),
                cardColor: const Color(0xFF4ECDC4).withOpacity(0.2), // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
              ),
              
              const SizedBox(height: 20),
              
              // ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏ó‡∏ô VS
              Column(
                children: [
                  Row(
                    children: [
                      Expanded(child: Divider(color: const Color(0xFFE91E63).withOpacity(0.6), thickness: 2)),
                      Container(
                        margin: const EdgeInsets.symmetric(horizontal: 15),
                        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
                        decoration: BoxDecoration(
                          color: const Color(0xFF1B263B),
                          borderRadius: BorderRadius.circular(20),
                          border: Border.all(color: const Color(0xFFE91E63).withOpacity(0.5), width: 1.5),
                        ),
                        child: const Text(
                          'Product Price Comparator üîÑ ',
                          style: TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ),
                      Expanded(child: Divider(color: const Color(0xFFE91E63).withOpacity(0.6), thickness: 2)),
                    ],
                  ),
                ],
              ),
              
              const SizedBox(height: 20),
              
              // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
              _buildProductCard(
                title: 'Product 2',
                nameController: _product2NameController,
                volumeController: _product2VolumeController,
                priceController: _product2PriceController,
                selectedUnit: _product2Unit,
                onUnitChanged: (value) => setState(() => _product2Unit = value!),
                cardColor: const Color(0xFFFFD93D).withOpacity(0.2), // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
              ),
              
              const SizedBox(height: 30),
              
              // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: _compareProducts,
                      label: const Text(
                        'Compare Products',
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),
                  const SizedBox(width: 15),
                  ElevatedButton(
                    onPressed: _clearAll,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF6C5CE7),
                      padding: const EdgeInsets.all(15),
                    ),
                    child: 
                    const Icon
                    (Icons.clear, size: 24),
                  ),
                ],
              ),
              
              const SizedBox(height: 30),
              
              // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
              if (_comparisonResult != null) _buildResultCard(),
            ],
          ),
        ),
      ),
    );
  }

  // Widget ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡πÇ‡∏ó‡∏ô‡∏°‡∏∑‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö
  Widget _buildProductCard({
    required String title,
    required TextEditingController nameController,
    required TextEditingController volumeController,
    required TextEditingController priceController,
    required String selectedUnit,
    required ValueChanged<String?> onUnitChanged,
    required Color cardColor,
  }) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: const Color(0xFF1B263B), // ‡∏™‡∏µ‡∏°‡∏∑‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏•‡∏≠
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: const Color(0xFF415A77).withOpacity(0.5), // ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÇ‡∏ó‡∏ô‡∏°‡∏∑‡∏î
          width: 1,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡πå‡∏î
          Text(
            title,
            style: const TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 15),
          
          // ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          TextField(
            controller: nameController,
            decoration: const InputDecoration(
              labelText: 'üì¶ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
              hintText: '‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•',
            ),
            style: const TextStyle(color: Colors.white),
          ),
          const SizedBox(height: 15),
          
          // ‡πÅ‡∏ñ‡∏ß‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢
          Row(
            children: [
              // ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£
              Expanded(
                flex: 2,
                child: TextField(
                  controller: volumeController,
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(
                    labelText: 'üìè ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£/‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
                    hintText: '‡πÄ‡∏ä‡πà‡∏ô 250',
                  ),
                  style: const TextStyle(color: Colors.white),
                ),
              ),
              const SizedBox(width: 10),
              
              // Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢
              Expanded(
                flex: 1,
                child: DropdownButtonFormField<String>(
                  value: selectedUnit,
                  decoration: const InputDecoration(
                    labelText: 'üìê ‡∏´‡∏ô‡πà‡∏ß‡∏¢',
                  ),
                  dropdownColor: const Color(0xFF1B263B),
                  style: const TextStyle(color: Colors.white),
                  items: _units.map((unit) => DropdownMenuItem(
                    value: unit,
                    child: Text(unit, style: const TextStyle(color: Colors.white)),
                  )).toList(),
                  onChanged: onUnitChanged,
                ),
              ),
            ],
          ),
          const SizedBox(height: 15),
          
          // ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤
          TextField(
            controller: priceController,
            keyboardType: TextInputType.number,
            decoration: const InputDecoration(
              labelText: 'üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)',
              hintText: '‡πÄ‡∏ä‡πà‡∏ô 25',
              prefixText: '‡∏ø ',
            ),
            style: const TextStyle(color: Colors.white),
          ),
        ],
      ),
    );
  }

  // Widget ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
  Widget _buildResultCard() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(25),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            const Color(0xFF00F260).withOpacity(0.2), // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
            const Color(0xFF0575E6).withOpacity(0.2), // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: const Color(0xFF00F260).withOpacity(0.5),
          width: 2,
        ),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF00F260).withOpacity(0.3),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        children: [
          // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
          Text(
            '${_comparisonResult!.emoji} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ${_comparisonResult!.emoji}',
            style: const TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 20),
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠ 100 ‡∏°‡∏•. ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          Container(
            padding: const EdgeInsets.all(15),
            decoration: BoxDecoration(
              color: const Color(0xFF1B263B).withOpacity(0.7),
              borderRadius: BorderRadius.circular(15),
            ),
            child: Column(
              children: [
                Text(
                  'üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠ 100 ‡∏°‡∏•./‡∏Å‡∏£‡∏±‡∏°',
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 10),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    Column(
                      children: [
                        const Text('Product 1', style: TextStyle(color: Colors.white70)),
                        Text(
                          '‡∏ø${_comparisonResult!.product1PricePer100ML.toStringAsFixed(2)}',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFF4ECDC4),
                          ),
                        ),
                      ],
                    ),
                    Column(
                      children: [
                        const Text('Product 2', style: TextStyle(color: Colors.white70)),
                        Text(
                          '‡∏ø${_comparisonResult!.product2PricePer100ML.toStringAsFixed(2)}',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFFFFD93D),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 20),
          
          // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  const Color(0xFFFF6B6B).withOpacity(0.8),
                  const Color(0xFFE91E63).withOpacity(0.8),
                ],
              ),
              borderRadius: BorderRadius.circular(15),
            ),
            child: Column(
              children: [
                Text(
                  'üèÜ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
                  style: const TextStyle(
                    fontSize: 18,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 10),
                Text(
                  _comparisonResult!.betterChoice,
                  style: const TextStyle(
                    fontSize: 22,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
                if (_comparisonResult!.savings > 0) ...[
                  const SizedBox(height: 10),
                  Text(
                    'üí∞ ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏î‡πâ ‡∏ø${_comparisonResult!.savings.toStringAsFixed(2)} ‡∏ï‡πà‡∏≠ 100 ‡∏°‡∏•./‡∏Å‡∏£‡∏±‡∏°',
                    style: const TextStyle(
                      fontSize: 16,
                      color: Colors.white,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ],
            ),
          ),
        ],
      ),
    );
  }
}